// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema
generator client {
 provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url = env("DATABASE_URL")
}

model User {
  id    Int     @default(autoincrement()) @id
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  isVerified Boolean @default(false)

  email String @unique
  hash String

  firstName String?
  LastName String?

  articles Article[]

  comments Comment[]

  booknarks BookMark[]

  @@map("Users")
}

model BookMark {
    id    Int     @default(autoincrement()) @id
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    title String
    description String?
    link String

    userId Int
    user User @relation(fields: [userId], references: [id] )

    @@map("BookMarks")
}

model Article {
    id Int  @default(autoincrement()) @id
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    title String
    content String

    imageUrl String?
    likesNum Int? @default(0)

    userId Int
    user User @relation(fields: [userId], references: [id] )

    belongsCategory Category @relation(fields: [categoryId], references: [id])
    categoryId Int

    comments Comment[]

    @@map("Articles")
 }

model Category {
  id    Int    @id @default(autoincrement())
  name  String
  Article Article[]

  @@map("Categories")
}

model Comment {
     id Int  @default(autoincrement()) @id

     content String

     belongsArticle Article @relation(fields: [articleId], references: [id]) // A comment can have one article
     articleId Int

     belongsUser User @relation(fields: [userId], references: [id])
     userId Int

     createdAt DateTime @default(now())

     @@map("Comments")
}

model VerificationCode {

    email String  @unique

    code String @unique

    createdAt DateTime @default(now())

    @@map("Verification_codes")
}
